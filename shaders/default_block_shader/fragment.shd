#version 330 core

// lighting
uniform vec3 lightPos;

// textures
uniform sampler2D texture0; // side
uniform sampler2D texture1; // top
uniform sampler2D texture2; // bottom

// variables
in vec2 GS_texCoord;
in vec3 normal;
flat in int which_tex; // 0 for bottom, 1 for side, 2 for top
in vec3 fragPos;

out vec4 color;



void main()
{
    // =====  TEXTURE SAMPLING  ===== //

    switch(which_tex)
    {
    case 0:
        // side
        color = texture(texture0, vec2(GS_texCoord.x, 1.0f - GS_texCoord.y));
        break;
    case 1:
        // top
        color = texture(texture1, vec2(GS_texCoord.x, 1.0f - GS_texCoord.y));
        break;
    case 2:
        // bottom
        color = texture(texture2, vec2(GS_texCoord.x, 1.0f - GS_texCoord.y));
        break;
    default:
        // default equals side
        color = texture(texture0, vec2(GS_texCoord.x, 1.0f - GS_texCoord.y));
        break;
    }



    // =====  PHONG SHADING  ===== //

    vec3 result;

    // ambient
    float ambientStrength = 0.5;
    vec3 lightColor = vec3(1.0f, 1.0f, 1.0f);
    vec3 ambient = ambientStrength * lightColor;
    result = ambient;

    // diffuse
    vec3 norm = normalize(normal);
    vec3 lightDir = normalize(lightPos - fragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    result += diffuse;



    // =====  FINAL FRAGMENT COLOR ===== //

    color *= vec4(result, 1.0f);
}
