#version 330 core

layout (points) in;
layout (triangle_strip, max_vertices = 36) out;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

// halfsize of a block
uniform float sz;

out vec2 GS_texCoord;
out vec3 normal;
flat out int which_tex;
out vec3 fragPos;

void main()
{
    vec4 pos = gl_in[0].gl_Position;
    mat4 trans = projection * view * model;

    // emitted vertices are to be interpreted as if using the 3-finger rule:
    // x goes to the right, y goes up, z goes to the front

    // xyz = (p/m)(p/m)(p/m)
    // (p for plus, m for minus)
    vec4 pmp = trans * vec4(pos.x + sz, pos.y - sz, pos.z + sz, pos.w);
    vec4 ppp = trans * vec4(pos.x + sz, pos.y + sz, pos.z + sz, pos.w);
    vec4 mmp = trans * vec4(pos.x - sz, pos.y - sz, pos.z + sz, pos.w);
    vec4 mpp = trans * vec4(pos.x - sz, pos.y + sz, pos.z + sz, pos.w);
    vec4 pmm = trans * vec4(pos.x + sz, pos.y - sz, pos.z - sz, pos.w);
    vec4 ppm = trans * vec4(pos.x + sz, pos.y + sz, pos.z - sz, pos.w);
    vec4 mmm = trans * vec4(pos.x - sz, pos.y - sz, pos.z - sz, pos.w);
    vec4 mpm = trans * vec4(pos.x - sz, pos.y + sz, pos.z - sz, pos.w);


    // face - front
    gl_Position = mmp; GS_texCoord = vec2(0.0f, 0.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = mpp; GS_texCoord = vec2(0.0f, 1.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = ppp; GS_texCoord = vec2(1.0f, 1.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    EndPrimitive();
    gl_Position = mmp; GS_texCoord = vec2(0.0f, 0.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = ppp; GS_texCoord = vec2(1.0f, 1.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = pmp; GS_texCoord = vec2(1.0f, 0.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    EndPrimitive();

    // face - back
    gl_Position = mmm; GS_texCoord = vec2(0.0f, 0.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = mpm; GS_texCoord = vec2(0.0f, 1.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = ppm; GS_texCoord = vec2(1.0f, 1.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    EndPrimitive();
    gl_Position = mmm; GS_texCoord = vec2(0.0f, 0.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = ppm; GS_texCoord = vec2(1.0f, 1.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = pmm; GS_texCoord = vec2(1.0f, 0.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    EndPrimitive();

    // face - bottom
    gl_Position = mmm; GS_texCoord = vec2(0.0f, 0.0f);
    which_tex = 2; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = mmp; GS_texCoord = vec2(0.0f, 1.0f);
    which_tex = 2; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = pmp; GS_texCoord = vec2(1.0f, 1.0f);
    which_tex = 2; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    EndPrimitive();
    gl_Position = mmm; GS_texCoord = vec2(0.0f, 0.0f);
    which_tex = 2; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = pmp; GS_texCoord = vec2(1.0f, 1.0f);
    which_tex = 2; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = pmm; GS_texCoord = vec2(1.0f, 0.0f);
    which_tex = 2; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    EndPrimitive();

    // face - top
    gl_Position = mpm; GS_texCoord = vec2(0.0f, 0.0f);
    which_tex = 1; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = mpp; GS_texCoord = vec2(0.0f, 1.0f);
    which_tex = 1; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = ppp; GS_texCoord = vec2(1.0f, 1.0f);
    which_tex = 1; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    EndPrimitive();
    gl_Position = mpm; GS_texCoord = vec2(0.0f, 0.0f);
    which_tex = 1; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = ppp; GS_texCoord = vec2(1.0f, 1.0f);
    which_tex = 1; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = ppm; GS_texCoord = vec2(1.0f, 0.0f);
    which_tex = 1; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    EndPrimitive();

    // face - left
    gl_Position = mmm; GS_texCoord = vec2(0.0f, 0.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = mpm; GS_texCoord = vec2(0.0f, 1.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = mpp; GS_texCoord = vec2(1.0f, 1.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    EndPrimitive();
    gl_Position = mmm; GS_texCoord = vec2(0.0f, 0.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = mpp; GS_texCoord = vec2(1.0f, 1.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = mmp; GS_texCoord = vec2(1.0f, 0.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    EndPrimitive();

    // face - right
    gl_Position = pmm; GS_texCoord = vec2(0.0f, 0.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = ppm; GS_texCoord = vec2(0.0f, 1.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = ppp; GS_texCoord = vec2(1.0f, 1.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    EndPrimitive();
    gl_Position = pmm; GS_texCoord = vec2(0.0f, 0.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = ppp; GS_texCoord = vec2(1.0f, 1.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    gl_Position = pmp; GS_texCoord = vec2(1.0f, 0.0f);
    which_tex = 0; normal = gl_Position.xyz - pos.xyz;
    fragPos = vec4(model * gl_Position).xyz;
    EmitVertex();
    EndPrimitive();


    // done with the (not so primitive) primitive(s)
}
