#version 330 core

layout (points) in;
layout (triangle_strip, max_vertices = 36) out;

// no model matrix is necessary since block coordinates
// are already in world space
uniform mat4 view;
uniform mat4 projection;

// halfsize of a block
uniform float sz;

// how to interpret the surface mesh data for the vertex
#define SURFACE_MESH_TOP     1
#define SURFACE_MESH_BACK    2
#define SURFACE_MESH_LEFT    4
#define SURFACE_MESH_RIGHT   8
#define SURFACE_MESH_FRONT  16
#define SURFACE_MESH_BOTTOM 32

out vec2 GS_texCoord;
out vec3 normal;
flat out int which_tex;
out vec3 fragPos;


void main()
{
    vec4 pos = gl_in[0].gl_Position;
    int surfaceMesh = int(pos.w);
    pos.w = 1.0f;
    mat4 trans = projection * view;

    // emitted vertices are to be interpreted as if using the 3-finger rule:
    // x goes to the right, y goes up, z goes to the front

    // xyz = (p/m)(p/m)(p/m)
    // (p for plus, m for minus)
    vec4 pmp = trans * vec4(pos.x + sz, pos.y - sz, pos.z + sz, pos.w);
    vec4 ppp = trans * vec4(pos.x + sz, pos.y + sz, pos.z + sz, pos.w);
    vec4 mmp = trans * vec4(pos.x - sz, pos.y - sz, pos.z + sz, pos.w);
    vec4 mpp = trans * vec4(pos.x - sz, pos.y + sz, pos.z + sz, pos.w);
    vec4 pmm = trans * vec4(pos.x + sz, pos.y - sz, pos.z - sz, pos.w);
    vec4 ppm = trans * vec4(pos.x + sz, pos.y + sz, pos.z - sz, pos.w);
    vec4 mmm = trans * vec4(pos.x - sz, pos.y - sz, pos.z - sz, pos.w);
    vec4 mpm = trans * vec4(pos.x - sz, pos.y + sz, pos.z - sz, pos.w);

    //     mpm------ppm
    //     /|       /|
    //    / |      / |
    //  mpp------ppp |
    //   |  |     |  |
    //   | mmm----|-pmm
    //   | /      | /
    //   |/       |/
    //  mmp------pmp

    int front = surfaceMesh & SURFACE_MESH_FRONT;
    if(front > 0)
    {
        gl_Position = mmp; GS_texCoord = vec2(0.0f, 0.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = mpp; GS_texCoord = vec2(0.0f, 1.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = ppp; GS_texCoord = vec2(1.0f, 1.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        EndPrimitive();
        gl_Position = mmp; GS_texCoord = vec2(0.0f, 0.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = ppp; GS_texCoord = vec2(1.0f, 1.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = pmp; GS_texCoord = vec2(1.0f, 0.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        EndPrimitive();
    }

    int back = surfaceMesh & SURFACE_MESH_BACK;
    if(back > 0)
    {
        gl_Position = ppm; GS_texCoord = vec2(0.0f, 1.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = mpm; GS_texCoord = vec2(1.0f, 1.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = mmm; GS_texCoord = vec2(1.0f, 0.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        EndPrimitive();
        gl_Position = ppm; GS_texCoord = vec2(0.0f, 1.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = mmm; GS_texCoord = vec2(1.0f, 0.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = pmm; GS_texCoord = vec2(0.0f, 0.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        EndPrimitive();
    }

    int top = surfaceMesh & SURFACE_MESH_TOP;
    if(top > 0)
    {
        gl_Position = mpp; GS_texCoord = vec2(0.0f, 0.0f);
        which_tex = 1; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = mpm; GS_texCoord = vec2(0.0f, 1.0f);
        which_tex = 1; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = ppm; GS_texCoord = vec2(1.0f, 1.0f);
        which_tex = 1; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        EndPrimitive();
        gl_Position = mpp; GS_texCoord = vec2(0.0f, 0.0f);
        which_tex = 1; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = ppm; GS_texCoord = vec2(1.0f, 1.0f);
        which_tex = 1; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = ppp; GS_texCoord = vec2(1.0f, 0.0f);
        which_tex = 1; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        EndPrimitive();
    }

    int left = surfaceMesh & SURFACE_MESH_LEFT;
    if(left > 0)
    {
        gl_Position = mmm; GS_texCoord = vec2(0.0f, 0.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = mpm; GS_texCoord = vec2(0.0f, 1.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = mpp; GS_texCoord = vec2(1.0f, 1.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        EndPrimitive();
        gl_Position = mmm; GS_texCoord = vec2(0.0f, 0.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = mpp; GS_texCoord = vec2(1.0f, 1.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = mmp; GS_texCoord = vec2(1.0f, 0.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        EndPrimitive();
    }

    int right = surfaceMesh & SURFACE_MESH_RIGHT;
    if(right > 0)
    {
        gl_Position = pmp; GS_texCoord = vec2(0.0f, 0.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = ppp; GS_texCoord = vec2(0.0f, 1.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = ppm; GS_texCoord = vec2(1.0f, 1.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        EndPrimitive();
        gl_Position = pmp; GS_texCoord = vec2(0.0f, 0.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = ppm; GS_texCoord = vec2(1.0f, 1.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = pmm; GS_texCoord = vec2(1.0f, 0.0f);
        which_tex = 0; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        EndPrimitive();
    }

    int bottom = surfaceMesh & SURFACE_MESH_BOTTOM;
    if(bottom > 0)
    {
        gl_Position = mmm; GS_texCoord = vec2(0.0f, 0.0f);
        which_tex = 2; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = mmp; GS_texCoord = vec2(0.0f, 1.0f);
        which_tex = 2; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = pmp; GS_texCoord = vec2(1.0f, 1.0f);
        which_tex = 2; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        EndPrimitive();
        gl_Position = mmm; GS_texCoord = vec2(0.0f, 0.0f);
        which_tex = 2; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = pmp; GS_texCoord = vec2(1.0f, 1.0f);
        which_tex = 2; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        gl_Position = pmm; GS_texCoord = vec2(1.0f, 0.0f);
        which_tex = 2; normal = gl_Position.xyz - pos.xyz;
        fragPos = vec4(gl_Position).xyz;
        EmitVertex();
        EndPrimitive();
    }


    // done with the (not so primitive) primitive(s)
}
